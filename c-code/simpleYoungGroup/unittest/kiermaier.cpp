//#define BOOST_TEST_DYN_LINK
#define BOOST_TEST_MODULE laddergame_light

#include <boost/test/unit_test.hpp>
#include <boost/function.hpp>
#include <iostream>
#include <iomanip>
#include <fstream>
#include <algorithm>

#include <baseaction_neu.hpp>
#include <labelled_branching.hpp>
#include <boost/shared_ptr.hpp>

//#include <simpleYoungGroup/simpleLaddergameHomomorphisms.hpp>
//#include <Algorithms/algorithm_depthfirst_simple_laststep.hpp>
#include <simpleYoungGroup/function_builder_depthfirst_simple_lastfusing.hpp>
#include <simpleYoungGroup/laddergame_light.hpp>
#include <simpleYoungGroup/laddergame_light_breadthfirst.hpp>
#include <graphSpezial/calculate_complete_graph_group.hpp>


using namespace boost::unit_test;

#define BREADTHFIRST
#ifdef BREADTHFIRST
  #define REALCANONIZER
#endif
//#define LONGLIST

#define SINGLE
//#define MULTI
#define LENGTH 28



template <class LABRA, unsigned N>
struct konstructor {
    typedef typename LABRA::GROUP_element_type GRELM;
    typedef boost::function<bool(unsigned,GRELM const&)> CANTEST;
    static unsigned const S =                       N*(N-1)/2;
    konstructor(CANTEST const& c) : test(c) {}
    void operator()();
    CANTEST test;
};



#ifdef SINGLE
BOOST_AUTO_TEST_CASE( read_generators )
{

    unsigned gen1[] = {442,445,448,451,454,457,460,463,466,523,526,529,532,535,538,541,544,547,604,607,610,613,616,619,622,625,628,685,688,691,694,697,700,703,706,709,766,769,772,775,778,781,784,787,790,847,850,853,856,859,862,865,868,871,928,931,934,937,940,943,946,949,952,1009,1012,1015,1018,1021,1024,1027,1030,1033,1090,1093,1096,1099,1102,1105,1108,1111,1114,415,418,421,424,427,430,433,436,439,577,580,583,586,589,592,595,598,601,496,499,502,505,508,511,514,517,520,901,904,907,910,913,916,919,922,925,1063,1066,1069,1072,1075,1078,1081,1084,1087,982,985,988,991,994,997,1000,1003,1006,658,661,664,667,670,673,676,679,682,820,823,826,829,832,835,838,841,844,739,742,745,748,751,754,757,760,763,270,271,272,273,274,275,276,277,278,363,366,369,372,375,378,381,384,387,362,368,365,371,377,374,380,386,383,1119,1146,1173,1128,1155,1182,1137,1164,1191,1122,1149,1176,1185,1131,1158,1167,1194,1140,1125,1152,1179,1161,1188,1134,1197,1143,1170,1118,1145,1172,1136,1163,1190,1127,1154,1181,1124,1151,1178,1169,1196,1142,1187,1133,1160,1121,1148,1175,1193,1139,1166,1157,1184,1130,285,294,303,312,321,330,339,348,357,282,300,291,336,354,345,309,327,318,360,1204,1201,367,376,385,364,382,373,279,288,297,306,315,324,333,342,351,18,21,24,45,48,51,72,75,78,99,102,105,126,129,132,153,156,159,180,183,186,207,210,213,234,237,240,9,12,15,63,66,69,36,39,42,171,174,177,225,228,231,198,201,204,90,93,96,144,147,150,117,120,123,1207,1208,1209,1200,1203,1206,1199,1205,1202,1135,1138,1141,1162,1165,1168,1189,1192,1195,1126,1129,1132,1180,1183,1186,1153,1156,1159,1198,0,3,6,27,30,33,54,57,60,81,84,87,108,111,114,135,138,141,162,165,168,189,192,195,216,219,222,243,286,287,19,22,25,20,26,23,443,446,449,452,455,458,461,464,467,444,450,447,462,468,465,453,459,456,281,244,283,52,46,49,50,47,53,530,524,527,539,533,536,548,542,545,528,525,531,546,543,549,537,534,540,280,284,245,76,79,73,80,77,74,608,611,605,617,620,614,626,629,623,612,609,606,630,627,624,621,618,615,2,35,59,246,295,296,10,67,43,704,707,710,686,689,692,695,698,701,696,702,699,687,693,690,705,711,708,5,29,62,290,247,292,70,37,13,791,785,788,773,767,770,782,776,779,780,777,783,771,768,774,789,786,792,8,32,56,289,293,248,40,16,64,869,872,866,851,854,848,860,863,857,864,861,858,855,852,849,873,870,867,1,31,61,11,71,41,249,304,305,938,941,944,947,950,953,929,932,935,948,954,951,939,945,942,930,936,933,7,28,58,68,38,17,299,250,301,1025,1019,1022,1034,1028,1031,1016,1010,1013,1032,1029,1035,1023,1020,1026,1014,1011,1017,4,34,55,44,14,65,298,302,251,1103,1106,1100,1112,1115,1109,1094,1097,1091,1116,1113,1110,1107,1104,1101,1098,1095,1092,390,477,555,651,738,816,885,972,1050,252,313,314,100,103,106,101,107,104,416,581,503,911,1076,998,677,842,764,393,471,558,654,732,819,888,966,1053,308,253,310,133,127,130,131,128,134,584,497,419,1079,992,914,845,758,680,396,474,552,657,735,813,891,969,1047,307,311,254,157,160,154,161,158,155,500,422,578,995,917,1073,761,683,839,399,486,564,633,720,798,894,981,1059,83,116,140,255,322,323,91,148,124,920,1085,1007,659,824,746,425,590,512,402,480,567,636,714,801,897,975,1062,86,110,143,317,256,319,151,118,94,1088,1001,923,827,740,662,593,506,428,405,483,561,639,717,795,900,978,1056,89,113,137,316,320,257,121,97,145,1004,926,1082,743,665,821,509,431,587,408,495,573,642,729,807,876,963,1041,82,112,142,92,152,122,258,331,332,668,833,755,434,599,521,902,1067,989,411,489,576,645,723,810,879,957,1044,88,109,139,149,119,98,326,259,328,836,749,671,602,515,437,1070,983,905,414,492,570,648,726,804,882,960,1038,85,115,136,125,95,146,325,329,260,752,674,830,518,440,596,986,908,1064,389,473,557,641,725,809,893,977,1061,417,585,501,921,1089,1005,669,837,753,261,340,341,181,184,187,182,188,185,395,470,554,647,722,806,899,974,1058,582,498,423,1086,1002,927,834,750,675,335,262,337,214,208,211,212,209,215,392,476,551,644,728,803,896,980,1055,504,420,579,1008,924,1083,756,672,831,334,338,263,238,241,235,242,239,236,407,491,575,632,716,800,884,968,1052,912,1080,996,660,828,744,435,603,519,164,197,221,264,349,350,172,229,205,413,488,572,638,713,797,890,965,1049,1077,993,918,825,741,666,600,516,441,167,191,224,344,265,346,232,199,175,410,494,569,635,719,794,887,971,1046,999,915,1074,747,663,822,522,438,597,170,194,218,343,347,266,202,178,226,398,482,566,650,734,818,875,959,1043,678,846,762,426,594,510,903,1071,987,163,193,223,173,233,203,267,358,359,404,479,563,656,731,815,881,956,1040,843,759,684,591,507,432,1068,984,909,169,190,220,230,200,179,353,268,355,401,485,560,653,737,812,878,962,1037,765,681,840,513,429,588,990,906,1065,166,196,217,206,176,227,352,356,269,388,391,394,397,400,403,406,409,412,469,472,475,478,481,484,487,490,493,550,553,556,559,562,565,568,571,574,631,634,637,640,643,646,649,652,655,712,715,718,721,724,727,730,733,736,793,796,799,802,805,808,811,814,817,874,877,880,883,886,889,892,895,898,955,958,961,964,967,970,973,976,979,1036,1039,1042,1045,1048,1051,1054,1057,1060,1117,1120,1123,1144,1147,1150,1171,1174,1177,361,370,379};
    unsigned gen2[] = {0,1,2,3,4,5,6,7,8,18,19,20,21,22,23,24,25,26,9,10,11,12,13,14,15,16,17,54,55,56,57,58,59,60,61,62,72,73,74,75,76,77,78,79,80,63,64,65,66,67,68,69,70,71,27,28,29,30,31,32,33,34,35,45,46,47,48,49,50,51,52,53,36,37,38,39,40,41,42,43,44,162,163,164,165,166,167,168,169,170,180,181,182,183,184,185,186,187,188,171,172,173,174,175,176,177,178,179,216,217,218,219,220,221,222,223,224,234,235,236,237,238,239,240,241,242,225,226,227,228,229,230,231,232,233,189,190,191,192,193,194,195,196,197,207,208,209,210,211,212,213,214,215,198,199,200,201,202,203,204,205,206,81,82,83,84,85,86,87,88,89,99,100,101,102,103,104,105,106,107,90,91,92,93,94,95,96,97,98,135,136,137,138,139,140,141,142,143,153,154,155,156,157,158,159,160,161,144,145,146,147,148,149,150,151,152,108,109,110,111,112,113,114,115,116,126,127,128,129,130,131,132,133,134,117,118,119,120,121,122,123,124,125,243,245,244,249,251,250,246,248,247,261,263,262,267,269,268,264,266,265,252,254,253,258,260,259,255,257,256,270,271,272,273,274,275,276,277,278,279,280,281,285,286,287,282,283,284,297,298,299,303,304,305,300,301,302,288,289,290,294,295,296,291,292,293,333,334,335,339,340,341,336,337,338,351,352,353,357,358,359,354,355,356,342,343,344,348,349,350,345,346,347,306,307,308,312,313,314,309,310,311,324,325,326,330,331,332,327,328,329,315,316,317,321,322,323,318,319,320,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209};
    unsigned static const N = sizeof(gen1)/4;


// INIT BEGIN //////////////////////////
    using boost::container::vector;

//    unsigned static const N = 1210;
    typedef   baseAction<N>               ACTION;
    typedef   neu::labra<ACTION>          LABRA;
    typedef   LABRA::GROUP_element_type   GRELM;
    typedef   LABRA::SET_element_type     SETELM;

    vector<SETELM> set2(N);
    for (unsigned i=0; i<N; ++i)
      set2[i] = SETELM(i);

    LABRA C(set2);
// INIT END //////////////////////////

    GRELM generator1(gen1);
    C.sift(generator1);
    GRELM generator2(gen2);
    C.sift(generator2);
    C.make_strong();
    cout <<"Die Gruppe hat die Ordnung "<<std::setw(20)<<std::setprecision(15)<<C.size()<<endl;

    unsigned elmnt1[] = {1117, 1145, 1173, 734, 986, 508, 360, 167, 75, 123, 220, 795, 389, 597, 889, 828, 456, 749, 657, 966, 530, 106, 62, 493, 434, 863, 1095, 949, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 22, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 8, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 21, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 9, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 7, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 10, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 6, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 12, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 24, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 16, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 23, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 5, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 20, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 13, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 18, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 3, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 17, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 11, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 15, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 25, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 14, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 27, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 19, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 4, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 26, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 0, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 2, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209};
    //0 12 24 29 82 94 106 167 276 340 356 364 505 549 565 591 604 680 693 717 810 830 903 941 967 1052 1111 1152
#ifndef BREADTHFIRST
    using laddergame::depthfirst::simple::laddergame_light;
#else
    using laddergame::breadthfirst::simple::laddergame_light;
#endif

    static unsigned const Z = LENGTH; 
    GRELM c;
    laddergame_light<LABRA> test(Z,C);
    bool result = false;
    std::sort(elmnt1,elmnt1+Z);
    while ( !result ) {
        GRELM kand1(elmnt1);
#ifndef REALCANONIZER
        result = test.IsSmallestOrbitRep(Z,kand1,c);
#else
        test.MakeSmallestOrbitRep(Z,kand1,c);
        result = true;
#endif
        for (unsigned i=0; i<Z; ++i) {
            SETELM o(i);
            o = o<<kand1*c;
            elmnt1[i] = o.getit();
        }
        std::sort(elmnt1,elmnt1+Z);
        for (unsigned i=0; i<Z; ++i) 
            cout <<std::setw(3)<<elmnt1[i]<<" ";
        cout <<endl;
    }
    cout <<"*****************************************************"<<endl;

    GRELM kand1(elmnt1);
//    cout <<kand1<<endl;

}
#endif







#ifdef MULTI
BOOST_AUTO_TEST_CASE( read_generators_from_file )
{

#ifndef BREADTHFIRST
    using laddergame::depthfirst::simple::laddergame_light;
#else
    using laddergame::breadthfirst::simple::laddergame_light;
#endif

    unsigned gen1[] = {442,445,448,451,454,457,460,463,466,523,526,529,532,535,538,541,544,547,604,607,610,613,616,619,622,625,628,685,688,691,694,697,700,703,706,709,766,769,772,775,778,781,784,787,790,847,850,853,856,859,862,865,868,871,928,931,934,937,940,943,946,949,952,1009,1012,1015,1018,1021,1024,1027,1030,1033,1090,1093,1096,1099,1102,1105,1108,1111,1114,415,418,421,424,427,430,433,436,439,577,580,583,586,589,592,595,598,601,496,499,502,505,508,511,514,517,520,901,904,907,910,913,916,919,922,925,1063,1066,1069,1072,1075,1078,1081,1084,1087,982,985,988,991,994,997,1000,1003,1006,658,661,664,667,670,673,676,679,682,820,823,826,829,832,835,838,841,844,739,742,745,748,751,754,757,760,763,270,271,272,273,274,275,276,277,278,363,366,369,372,375,378,381,384,387,362,368,365,371,377,374,380,386,383,1119,1146,1173,1128,1155,1182,1137,1164,1191,1122,1149,1176,1185,1131,1158,1167,1194,1140,1125,1152,1179,1161,1188,1134,1197,1143,1170,1118,1145,1172,1136,1163,1190,1127,1154,1181,1124,1151,1178,1169,1196,1142,1187,1133,1160,1121,1148,1175,1193,1139,1166,1157,1184,1130,285,294,303,312,321,330,339,348,357,282,300,291,336,354,345,309,327,318,360,1204,1201,367,376,385,364,382,373,279,288,297,306,315,324,333,342,351,18,21,24,45,48,51,72,75,78,99,102,105,126,129,132,153,156,159,180,183,186,207,210,213,234,237,240,9,12,15,63,66,69,36,39,42,171,174,177,225,228,231,198,201,204,90,93,96,144,147,150,117,120,123,1207,1208,1209,1200,1203,1206,1199,1205,1202,1135,1138,1141,1162,1165,1168,1189,1192,1195,1126,1129,1132,1180,1183,1186,1153,1156,1159,1198,0,3,6,27,30,33,54,57,60,81,84,87,108,111,114,135,138,141,162,165,168,189,192,195,216,219,222,243,286,287,19,22,25,20,26,23,443,446,449,452,455,458,461,464,467,444,450,447,462,468,465,453,459,456,281,244,283,52,46,49,50,47,53,530,524,527,539,533,536,548,542,545,528,525,531,546,543,549,537,534,540,280,284,245,76,79,73,80,77,74,608,611,605,617,620,614,626,629,623,612,609,606,630,627,624,621,618,615,2,35,59,246,295,296,10,67,43,704,707,710,686,689,692,695,698,701,696,702,699,687,693,690,705,711,708,5,29,62,290,247,292,70,37,13,791,785,788,773,767,770,782,776,779,780,777,783,771,768,774,789,786,792,8,32,56,289,293,248,40,16,64,869,872,866,851,854,848,860,863,857,864,861,858,855,852,849,873,870,867,1,31,61,11,71,41,249,304,305,938,941,944,947,950,953,929,932,935,948,954,951,939,945,942,930,936,933,7,28,58,68,38,17,299,250,301,1025,1019,1022,1034,1028,1031,1016,1010,1013,1032,1029,1035,1023,1020,1026,1014,1011,1017,4,34,55,44,14,65,298,302,251,1103,1106,1100,1112,1115,1109,1094,1097,1091,1116,1113,1110,1107,1104,1101,1098,1095,1092,390,477,555,651,738,816,885,972,1050,252,313,314,100,103,106,101,107,104,416,581,503,911,1076,998,677,842,764,393,471,558,654,732,819,888,966,1053,308,253,310,133,127,130,131,128,134,584,497,419,1079,992,914,845,758,680,396,474,552,657,735,813,891,969,1047,307,311,254,157,160,154,161,158,155,500,422,578,995,917,1073,761,683,839,399,486,564,633,720,798,894,981,1059,83,116,140,255,322,323,91,148,124,920,1085,1007,659,824,746,425,590,512,402,480,567,636,714,801,897,975,1062,86,110,143,317,256,319,151,118,94,1088,1001,923,827,740,662,593,506,428,405,483,561,639,717,795,900,978,1056,89,113,137,316,320,257,121,97,145,1004,926,1082,743,665,821,509,431,587,408,495,573,642,729,807,876,963,1041,82,112,142,92,152,122,258,331,332,668,833,755,434,599,521,902,1067,989,411,489,576,645,723,810,879,957,1044,88,109,139,149,119,98,326,259,328,836,749,671,602,515,437,1070,983,905,414,492,570,648,726,804,882,960,1038,85,115,136,125,95,146,325,329,260,752,674,830,518,440,596,986,908,1064,389,473,557,641,725,809,893,977,1061,417,585,501,921,1089,1005,669,837,753,261,340,341,181,184,187,182,188,185,395,470,554,647,722,806,899,974,1058,582,498,423,1086,1002,927,834,750,675,335,262,337,214,208,211,212,209,215,392,476,551,644,728,803,896,980,1055,504,420,579,1008,924,1083,756,672,831,334,338,263,238,241,235,242,239,236,407,491,575,632,716,800,884,968,1052,912,1080,996,660,828,744,435,603,519,164,197,221,264,349,350,172,229,205,413,488,572,638,713,797,890,965,1049,1077,993,918,825,741,666,600,516,441,167,191,224,344,265,346,232,199,175,410,494,569,635,719,794,887,971,1046,999,915,1074,747,663,822,522,438,597,170,194,218,343,347,266,202,178,226,398,482,566,650,734,818,875,959,1043,678,846,762,426,594,510,903,1071,987,163,193,223,173,233,203,267,358,359,404,479,563,656,731,815,881,956,1040,843,759,684,591,507,432,1068,984,909,169,190,220,230,200,179,353,268,355,401,485,560,653,737,812,878,962,1037,765,681,840,513,429,588,990,906,1065,166,196,217,206,176,227,352,356,269,388,391,394,397,400,403,406,409,412,469,472,475,478,481,484,487,490,493,550,553,556,559,562,565,568,571,574,631,634,637,640,643,646,649,652,655,712,715,718,721,724,727,730,733,736,793,796,799,802,805,808,811,814,817,874,877,880,883,886,889,892,895,898,955,958,961,964,967,970,973,976,979,1036,1039,1042,1045,1048,1051,1054,1057,1060,1117,1120,1123,1144,1147,1150,1171,1174,1177,361,370,379};
    unsigned gen2[] = {0,1,2,3,4,5,6,7,8,18,19,20,21,22,23,24,25,26,9,10,11,12,13,14,15,16,17,54,55,56,57,58,59,60,61,62,72,73,74,75,76,77,78,79,80,63,64,65,66,67,68,69,70,71,27,28,29,30,31,32,33,34,35,45,46,47,48,49,50,51,52,53,36,37,38,39,40,41,42,43,44,162,163,164,165,166,167,168,169,170,180,181,182,183,184,185,186,187,188,171,172,173,174,175,176,177,178,179,216,217,218,219,220,221,222,223,224,234,235,236,237,238,239,240,241,242,225,226,227,228,229,230,231,232,233,189,190,191,192,193,194,195,196,197,207,208,209,210,211,212,213,214,215,198,199,200,201,202,203,204,205,206,81,82,83,84,85,86,87,88,89,99,100,101,102,103,104,105,106,107,90,91,92,93,94,95,96,97,98,135,136,137,138,139,140,141,142,143,153,154,155,156,157,158,159,160,161,144,145,146,147,148,149,150,151,152,108,109,110,111,112,113,114,115,116,126,127,128,129,130,131,132,133,134,117,118,119,120,121,122,123,124,125,243,245,244,249,251,250,246,248,247,261,263,262,267,269,268,264,266,265,252,254,253,258,260,259,255,257,256,270,271,272,273,274,275,276,277,278,279,280,281,285,286,287,282,283,284,297,298,299,303,304,305,300,301,302,288,289,290,294,295,296,291,292,293,333,334,335,339,340,341,336,337,338,351,352,353,357,358,359,354,355,356,342,343,344,348,349,350,345,346,347,306,307,308,312,313,314,309,310,311,324,325,326,330,331,332,327,328,329,315,316,317,321,322,323,318,319,320,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209};
    unsigned static const N = sizeof(gen1)/4;

// INIT BEGIN //////////////////////////
    using boost::container::vector;

    typedef   baseAction<N>               ACTION;
    typedef   neu::labra<ACTION>          LABRA;
    typedef   LABRA::GROUP_element_type   GRELM;
    typedef   LABRA::SET_element_type     SETELM;

    vector<SETELM> set2(N);
    for (unsigned i=0; i<N; ++i)
      set2[i] = SETELM(i);

    LABRA C(set2);
// INIT END //////////////////////////

#ifndef LONGLIST
    std::ifstream input("unittest/kiermaier_input_klein");
#else
    std::ifstream input("unittest/kiermaier_input");
#endif

    if ( false == input.is_open() ) {
        cout <<"Datei wurde nicht gefunden"<<endl;
        exit(-1);
    }


    GRELM generator1(gen1);
    C.sift(generator1);
    GRELM generator2(gen2);
    C.sift(generator2);
    C.make_strong();
    cout <<"Die Gruppe hat die Ordnung "<<std::setw(20)<<std::setprecision(15)<<C.size()<<endl;


    //0 12 24 29 82 94 106 167 276 340 356 364 505 549 565 591 604 680 693 717 810 830 903 941 967 1052 1111 1152
    unsigned elmnt1[N];


    char line[N*6];
    int counter = 0;

    static unsigned const Z = LENGTH; 
    GRELM b,c;
    laddergame_light<LABRA> test(Z,C,1);

    while ( !input.bad() && !input.fail() ) {

        std::cout <<" untersuche Kandidaten "<<++counter<<std::endl;
        input.getline(line,N*6);

        if ( !input.bad() && !input.fail() ) {
            char * startp = &line[0];
            char* endp;
            for (unsigned i=0; i<N; ++i) {
                if ( i ) {
                    while ( *startp != ',' )
                        startp++;
                    startp++;
                }
                elmnt1[i] = std::strtol(startp,&endp,10);
                startp = endp;
            }
        }

        GRELM kand2(elmnt1);
        for (unsigned i=0; i<Z; ++i) {
            SETELM o(i);
            o = o<<kand2*b;
            elmnt1[i] = o.getit();
        }

        bool result = false;
        std::sort(elmnt1,elmnt1+Z);
        while ( !result ) {
            GRELM kand1(elmnt1);
#ifndef REALCANONIZER
            result = test.IsSmallestOrbitRep(Z,kand1,c);
#else
            test.MakeSmallestOrbitRep(Z,kand1,c);
            b = c;
            result = true;
#endif
            if ( !result )
                b = b*c;
            for (unsigned i=0; i<Z; ++i) {
                SETELM o(i);
                o = o<<kand1*c;
                elmnt1[i] = o.getit();
            }
            std::sort(elmnt1,elmnt1+Z);
            for (unsigned i=0; i<Z; ++i) 
                cout <<std::setw(3)<<elmnt1[i]<<" ";
            cout <<endl;
        }
        cout <<"*****************************************************"<<endl;
#ifndef LONGLIST
        if ( counter == 99 )
#else
        if ( counter == 1000 )
//        if ( counter == 13144 )
#endif
            break;
    }

}
#endif




